/* wingpanel.h generated by valac 0.34.4, the Vala compiler, do not modify */


#ifndef __WINGPANEL_H__
#define __WINGPANEL_H__

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <gdk-pixbuf/gdk-pixbuf.h>

G_BEGIN_DECLS


#define WINGPANEL_TYPE_INDICATOR (wingpanel_indicator_get_type ())
#define WINGPANEL_INDICATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_TYPE_INDICATOR, WingpanelIndicator))
#define WINGPANEL_INDICATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_TYPE_INDICATOR, WingpanelIndicatorClass))
#define WINGPANEL_IS_INDICATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_TYPE_INDICATOR))
#define WINGPANEL_IS_INDICATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_TYPE_INDICATOR))
#define WINGPANEL_INDICATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_TYPE_INDICATOR, WingpanelIndicatorClass))

typedef struct _WingpanelIndicator WingpanelIndicator;
typedef struct _WingpanelIndicatorClass WingpanelIndicatorClass;
typedef struct _WingpanelIndicatorPrivate WingpanelIndicatorPrivate;

#define WINGPANEL_TYPE_INDICATOR_MANAGER (wingpanel_indicator_manager_get_type ())
#define WINGPANEL_INDICATOR_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_TYPE_INDICATOR_MANAGER, WingpanelIndicatorManager))
#define WINGPANEL_INDICATOR_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_TYPE_INDICATOR_MANAGER, WingpanelIndicatorManagerClass))
#define WINGPANEL_IS_INDICATOR_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_TYPE_INDICATOR_MANAGER))
#define WINGPANEL_IS_INDICATOR_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_TYPE_INDICATOR_MANAGER))
#define WINGPANEL_INDICATOR_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_TYPE_INDICATOR_MANAGER, WingpanelIndicatorManagerClass))

typedef struct _WingpanelIndicatorManager WingpanelIndicatorManager;
typedef struct _WingpanelIndicatorManagerClass WingpanelIndicatorManagerClass;
typedef struct _WingpanelIndicatorManagerPrivate WingpanelIndicatorManagerPrivate;

#define WINGPANEL_INDICATOR_MANAGER_TYPE_SERVER_TYPE (wingpanel_indicator_manager_server_type_get_type ())

#define WINGPANEL_WIDGETS_TYPE_CONTAINER (wingpanel_widgets_container_get_type ())
#define WINGPANEL_WIDGETS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_WIDGETS_TYPE_CONTAINER, WingpanelWidgetsContainer))
#define WINGPANEL_WIDGETS_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_WIDGETS_TYPE_CONTAINER, WingpanelWidgetsContainerClass))
#define WINGPANEL_WIDGETS_IS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_WIDGETS_TYPE_CONTAINER))
#define WINGPANEL_WIDGETS_IS_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_WIDGETS_TYPE_CONTAINER))
#define WINGPANEL_WIDGETS_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_WIDGETS_TYPE_CONTAINER, WingpanelWidgetsContainerClass))

typedef struct _WingpanelWidgetsContainer WingpanelWidgetsContainer;
typedef struct _WingpanelWidgetsContainerClass WingpanelWidgetsContainerClass;
typedef struct _WingpanelWidgetsContainerPrivate WingpanelWidgetsContainerPrivate;

#define WINGPANEL_WIDGETS_TYPE_BUTTON (wingpanel_widgets_button_get_type ())
#define WINGPANEL_WIDGETS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_WIDGETS_TYPE_BUTTON, WingpanelWidgetsButton))
#define WINGPANEL_WIDGETS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_WIDGETS_TYPE_BUTTON, WingpanelWidgetsButtonClass))
#define WINGPANEL_WIDGETS_IS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_WIDGETS_TYPE_BUTTON))
#define WINGPANEL_WIDGETS_IS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_WIDGETS_TYPE_BUTTON))
#define WINGPANEL_WIDGETS_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_WIDGETS_TYPE_BUTTON, WingpanelWidgetsButtonClass))

typedef struct _WingpanelWidgetsButton WingpanelWidgetsButton;
typedef struct _WingpanelWidgetsButtonClass WingpanelWidgetsButtonClass;
typedef struct _WingpanelWidgetsButtonPrivate WingpanelWidgetsButtonPrivate;

#define WINGPANEL_WIDGETS_TYPE_SWITCH (wingpanel_widgets_switch_get_type ())
#define WINGPANEL_WIDGETS_SWITCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_WIDGETS_TYPE_SWITCH, WingpanelWidgetsSwitch))
#define WINGPANEL_WIDGETS_SWITCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_WIDGETS_TYPE_SWITCH, WingpanelWidgetsSwitchClass))
#define WINGPANEL_WIDGETS_IS_SWITCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_WIDGETS_TYPE_SWITCH))
#define WINGPANEL_WIDGETS_IS_SWITCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_WIDGETS_TYPE_SWITCH))
#define WINGPANEL_WIDGETS_SWITCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_WIDGETS_TYPE_SWITCH, WingpanelWidgetsSwitchClass))

typedef struct _WingpanelWidgetsSwitch WingpanelWidgetsSwitch;
typedef struct _WingpanelWidgetsSwitchClass WingpanelWidgetsSwitchClass;
typedef struct _WingpanelWidgetsSwitchPrivate WingpanelWidgetsSwitchPrivate;

#define WINGPANEL_WIDGETS_TYPE_SEPARATOR (wingpanel_widgets_separator_get_type ())
#define WINGPANEL_WIDGETS_SEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_WIDGETS_TYPE_SEPARATOR, WingpanelWidgetsSeparator))
#define WINGPANEL_WIDGETS_SEPARATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_WIDGETS_TYPE_SEPARATOR, WingpanelWidgetsSeparatorClass))
#define WINGPANEL_WIDGETS_IS_SEPARATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_WIDGETS_TYPE_SEPARATOR))
#define WINGPANEL_WIDGETS_IS_SEPARATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_WIDGETS_TYPE_SEPARATOR))
#define WINGPANEL_WIDGETS_SEPARATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_WIDGETS_TYPE_SEPARATOR, WingpanelWidgetsSeparatorClass))

typedef struct _WingpanelWidgetsSeparator WingpanelWidgetsSeparator;
typedef struct _WingpanelWidgetsSeparatorClass WingpanelWidgetsSeparatorClass;
typedef struct _WingpanelWidgetsSeparatorPrivate WingpanelWidgetsSeparatorPrivate;

#define WINGPANEL_WIDGETS_TYPE_OVERLAY_ICON (wingpanel_widgets_overlay_icon_get_type ())
#define WINGPANEL_WIDGETS_OVERLAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_WIDGETS_TYPE_OVERLAY_ICON, WingpanelWidgetsOverlayIcon))
#define WINGPANEL_WIDGETS_OVERLAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_WIDGETS_TYPE_OVERLAY_ICON, WingpanelWidgetsOverlayIconClass))
#define WINGPANEL_WIDGETS_IS_OVERLAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_WIDGETS_TYPE_OVERLAY_ICON))
#define WINGPANEL_WIDGETS_IS_OVERLAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_WIDGETS_TYPE_OVERLAY_ICON))
#define WINGPANEL_WIDGETS_OVERLAY_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_WIDGETS_TYPE_OVERLAY_ICON, WingpanelWidgetsOverlayIconClass))

typedef struct _WingpanelWidgetsOverlayIcon WingpanelWidgetsOverlayIcon;
typedef struct _WingpanelWidgetsOverlayIconClass WingpanelWidgetsOverlayIconClass;
typedef struct _WingpanelWidgetsOverlayIconPrivate WingpanelWidgetsOverlayIconPrivate;

#define WINGPANEL_WIDGETS_TYPE_AUTOMATIC_SCROLL_BOX (wingpanel_widgets_automatic_scroll_box_get_type ())
#define WINGPANEL_WIDGETS_AUTOMATIC_SCROLL_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WINGPANEL_WIDGETS_TYPE_AUTOMATIC_SCROLL_BOX, WingpanelWidgetsAutomaticScrollBox))
#define WINGPANEL_WIDGETS_AUTOMATIC_SCROLL_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WINGPANEL_WIDGETS_TYPE_AUTOMATIC_SCROLL_BOX, WingpanelWidgetsAutomaticScrollBoxClass))
#define WINGPANEL_WIDGETS_IS_AUTOMATIC_SCROLL_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WINGPANEL_WIDGETS_TYPE_AUTOMATIC_SCROLL_BOX))
#define WINGPANEL_WIDGETS_IS_AUTOMATIC_SCROLL_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WINGPANEL_WIDGETS_TYPE_AUTOMATIC_SCROLL_BOX))
#define WINGPANEL_WIDGETS_AUTOMATIC_SCROLL_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WINGPANEL_WIDGETS_TYPE_AUTOMATIC_SCROLL_BOX, WingpanelWidgetsAutomaticScrollBoxClass))

typedef struct _WingpanelWidgetsAutomaticScrollBox WingpanelWidgetsAutomaticScrollBox;
typedef struct _WingpanelWidgetsAutomaticScrollBoxClass WingpanelWidgetsAutomaticScrollBoxClass;
typedef struct _WingpanelWidgetsAutomaticScrollBoxPrivate WingpanelWidgetsAutomaticScrollBoxPrivate;

struct _WingpanelIndicator {
	GObject parent_instance;
	WingpanelIndicatorPrivate * priv;
};

struct _WingpanelIndicatorClass {
	GObjectClass parent_class;
	GtkWidget* (*get_display_widget) (WingpanelIndicator* self);
	GtkWidget* (*get_widget) (WingpanelIndicator* self);
	void (*opened) (WingpanelIndicator* self);
	void (*closed) (WingpanelIndicator* self);
};

struct _WingpanelIndicatorManager {
	GObject parent_instance;
	WingpanelIndicatorManagerPrivate * priv;
};

struct _WingpanelIndicatorManagerClass {
	GObjectClass parent_class;
};

typedef enum  {
	WINGPANEL_INDICATOR_MANAGER_SERVER_TYPE_SESSION,
	WINGPANEL_INDICATOR_MANAGER_SERVER_TYPE_GREETER
} WingpanelIndicatorManagerServerType;

struct _WingpanelWidgetsContainer {
	GtkButton parent_instance;
	WingpanelWidgetsContainerPrivate * priv;
};

struct _WingpanelWidgetsContainerClass {
	GtkButtonClass parent_class;
};

struct _WingpanelWidgetsButton {
	WingpanelWidgetsContainer parent_instance;
	WingpanelWidgetsButtonPrivate * priv;
};

struct _WingpanelWidgetsButtonClass {
	WingpanelWidgetsContainerClass parent_class;
};

struct _WingpanelWidgetsSwitch {
	WingpanelWidgetsContainer parent_instance;
	WingpanelWidgetsSwitchPrivate * priv;
};

struct _WingpanelWidgetsSwitchClass {
	WingpanelWidgetsContainerClass parent_class;
};

struct _WingpanelWidgetsSeparator {
	GtkSeparator parent_instance;
	WingpanelWidgetsSeparatorPrivate * priv;
};

struct _WingpanelWidgetsSeparatorClass {
	GtkSeparatorClass parent_class;
};

struct _WingpanelWidgetsOverlayIcon {
	GtkOverlay parent_instance;
	WingpanelWidgetsOverlayIconPrivate * priv;
};

struct _WingpanelWidgetsOverlayIconClass {
	GtkOverlayClass parent_class;
};

struct _WingpanelWidgetsAutomaticScrollBox {
	GtkScrolledWindow parent_instance;
	WingpanelWidgetsAutomaticScrollBoxPrivate * priv;
};

struct _WingpanelWidgetsAutomaticScrollBoxClass {
	GtkScrolledWindowClass parent_class;
};


#define WINGPANEL_BUILD_DATADIR "/usr/local/share"
#define WINGPANEL_BUILD_PKGDATADIR "/usr/local/share/wingpanel"
#define WINGPANEL_BUILD_INDICATORS_DIR "/usr/local/lib/wingpanel"
#define WINGPANEL_BUILD_GETTEXT_PACKAGE "wingpanel"
#define WINGPANEL_BUILD_RELEASE_NAME "Wingpanel"
#define WINGPANEL_BUILD_VERSION "2.0.1"
#define WINGPANEL_BUILD_VERSION_INFO "Stable Release"
GType wingpanel_indicator_get_type (void) G_GNUC_CONST;
#define WINGPANEL_INDICATOR_APP_LAUNCHER "app-launcher"
#define WINGPANEL_INDICATOR_SESSION "session"
#define WINGPANEL_INDICATOR_DATETIME "datetime"
#define WINGPANEL_INDICATOR_NETWORK "network"
#define WINGPANEL_INDICATOR_MESSAGES "messages"
#define WINGPANEL_INDICATOR_SOUND "sound"
#define WINGPANEL_INDICATOR_POWER "power"
#define WINGPANEL_INDICATOR_SYNC "sync"
#define WINGPANEL_INDICATOR_PRINTER "printer"
#define WINGPANEL_INDICATOR_BLUETOOTH "bluetooth"
#define WINGPANEL_INDICATOR_KEYBOARD "keyboard"
GtkWidget* wingpanel_indicator_get_display_widget (WingpanelIndicator* self);
GtkWidget* wingpanel_indicator_get_widget (WingpanelIndicator* self);
void wingpanel_indicator_opened (WingpanelIndicator* self);
void wingpanel_indicator_closed (WingpanelIndicator* self);
WingpanelIndicator* wingpanel_indicator_construct (GType object_type);
const gchar* wingpanel_indicator_get_code_name (WingpanelIndicator* self);
const gchar* wingpanel_indicator_get_display_name (WingpanelIndicator* self);
const gchar* wingpanel_indicator_get_description (WingpanelIndicator* self);
gboolean wingpanel_indicator_get_visible (WingpanelIndicator* self);
void wingpanel_indicator_set_visible (WingpanelIndicator* self, gboolean value);
GType wingpanel_indicator_manager_get_type (void) G_GNUC_CONST;
GType wingpanel_indicator_manager_server_type_get_type (void) G_GNUC_CONST;
gchar* wingpanel_indicator_manager_server_type_restrictions_file_name (WingpanelIndicatorManagerServerType self);
WingpanelIndicatorManager* wingpanel_indicator_manager_get_default (void);
void wingpanel_indicator_manager_initialize (WingpanelIndicatorManager* self, WingpanelIndicatorManagerServerType server_type);
void wingpanel_indicator_manager_register_indicator (WingpanelIndicatorManager* self, const gchar* path, WingpanelIndicator* indicator);
void wingpanel_indicator_manager_deregister_indicator (WingpanelIndicatorManager* self, const gchar* path, WingpanelIndicator* indicator);
gboolean wingpanel_indicator_manager_has_indicators (WingpanelIndicatorManager* self);
GeeCollection* wingpanel_indicator_manager_get_indicators (WingpanelIndicatorManager* self);
GType wingpanel_widgets_container_get_type (void) G_GNUC_CONST;
WingpanelWidgetsContainer* wingpanel_widgets_container_new (void);
WingpanelWidgetsContainer* wingpanel_widgets_container_construct (GType object_type);
GtkGrid* wingpanel_widgets_container_get_content_widget (WingpanelWidgetsContainer* self);
GType wingpanel_widgets_button_get_type (void) G_GNUC_CONST;
WingpanelWidgetsButton* wingpanel_widgets_button_new (const gchar* caption, const gchar* icon_name);
WingpanelWidgetsButton* wingpanel_widgets_button_construct (GType object_type, const gchar* caption, const gchar* icon_name);
WingpanelWidgetsButton* wingpanel_widgets_button_new_with_mnemonic (const gchar* caption, const gchar* icon_name);
WingpanelWidgetsButton* wingpanel_widgets_button_construct_with_mnemonic (GType object_type, const gchar* caption, const gchar* icon_name);
void wingpanel_widgets_button_set_caption (WingpanelWidgetsButton* self, const gchar* caption);
gchar* wingpanel_widgets_button_get_caption (WingpanelWidgetsButton* self);
void wingpanel_widgets_button_set_icon (WingpanelWidgetsButton* self, const gchar* icon_name);
void wingpanel_widgets_button_set_pixbuf (WingpanelWidgetsButton* self, GdkPixbuf* pixbuf);
GdkPixbuf* wingpanel_widgets_button_get_pixbuf (WingpanelWidgetsButton* self);
GtkLabel* wingpanel_widgets_button_get_label (WingpanelWidgetsButton* self);
GType wingpanel_widgets_switch_get_type (void) G_GNUC_CONST;
WingpanelWidgetsSwitch* wingpanel_widgets_switch_new (const gchar* caption, gboolean active);
WingpanelWidgetsSwitch* wingpanel_widgets_switch_construct (GType object_type, const gchar* caption, gboolean active);
WingpanelWidgetsSwitch* wingpanel_widgets_switch_new_with_mnemonic (const gchar* caption, gboolean active);
WingpanelWidgetsSwitch* wingpanel_widgets_switch_construct_with_mnemonic (GType object_type, const gchar* caption, gboolean active);
void wingpanel_widgets_switch_set_caption (WingpanelWidgetsSwitch* self, const gchar* caption);
gchar* wingpanel_widgets_switch_get_caption (WingpanelWidgetsSwitch* self);
void wingpanel_widgets_switch_set_active (WingpanelWidgetsSwitch* self, gboolean active);
gboolean wingpanel_widgets_switch_get_active (WingpanelWidgetsSwitch* self);
GtkLabel* wingpanel_widgets_switch_get_label (WingpanelWidgetsSwitch* self);
GtkSwitch* wingpanel_widgets_switch_get_switch (WingpanelWidgetsSwitch* self);
void wingpanel_widgets_switch_toggle_switch (WingpanelWidgetsSwitch* self);
GType wingpanel_widgets_separator_get_type (void) G_GNUC_CONST;
WingpanelWidgetsSeparator* wingpanel_widgets_separator_new (void);
WingpanelWidgetsSeparator* wingpanel_widgets_separator_construct (GType object_type);
GType wingpanel_widgets_overlay_icon_get_type (void) G_GNUC_CONST;
WingpanelWidgetsOverlayIcon* wingpanel_widgets_overlay_icon_new (const gchar* icon_name);
WingpanelWidgetsOverlayIcon* wingpanel_widgets_overlay_icon_construct (GType object_type, const gchar* icon_name);
WingpanelWidgetsOverlayIcon* wingpanel_widgets_overlay_icon_new_from_pixbuf (GdkPixbuf* pixbuf);
WingpanelWidgetsOverlayIcon* wingpanel_widgets_overlay_icon_construct_from_pixbuf (GType object_type, GdkPixbuf* pixbuf);
void wingpanel_widgets_overlay_icon_set_main_pixbuf (WingpanelWidgetsOverlayIcon* self, GdkPixbuf* pixbuf);
GdkPixbuf* wingpanel_widgets_overlay_icon_get_main_pixbuf (WingpanelWidgetsOverlayIcon* self);
void wingpanel_widgets_overlay_icon_set_overlay_pixbuf (WingpanelWidgetsOverlayIcon* self, GdkPixbuf* pixbuf);
GdkPixbuf* wingpanel_widgets_overlay_icon_get_overlay_pixbuf (WingpanelWidgetsOverlayIcon* self);
void wingpanel_widgets_overlay_icon_set_main_icon_name (WingpanelWidgetsOverlayIcon* self, const gchar* icon_name);
gchar* wingpanel_widgets_overlay_icon_get_main_icon_name (WingpanelWidgetsOverlayIcon* self);
void wingpanel_widgets_overlay_icon_set_overlay_icon_name (WingpanelWidgetsOverlayIcon* self, const gchar* icon_name);
gchar* wingpanel_widgets_overlay_icon_get_overlay_icon_name (WingpanelWidgetsOverlayIcon* self);
GtkImage* wingpanel_widgets_overlay_icon_get_main_image (WingpanelWidgetsOverlayIcon* self);
GtkImage* wingpanel_widgets_overlay_icon_get_overlay_image (WingpanelWidgetsOverlayIcon* self);
GType wingpanel_widgets_automatic_scroll_box_get_type (void) G_GNUC_CONST;
WingpanelWidgetsAutomaticScrollBox* wingpanel_widgets_automatic_scroll_box_new (GtkAdjustment* hadj, GtkAdjustment* vadj);
WingpanelWidgetsAutomaticScrollBox* wingpanel_widgets_automatic_scroll_box_construct (GType object_type, GtkAdjustment* hadj, GtkAdjustment* vadj);
gint wingpanel_widgets_automatic_scroll_box_get_max_height (WingpanelWidgetsAutomaticScrollBox* self);
void wingpanel_widgets_automatic_scroll_box_set_max_height (WingpanelWidgetsAutomaticScrollBox* self, gint value);


G_END_DECLS

#endif
