/* wingpanel-2.0.vapi generated by valac 0.34.4, do not modify. */

namespace Wingpanel {
	namespace Build {
		[CCode (cheader_filename = "wingpanel.h")]
		public const string DATADIR;
		[CCode (cheader_filename = "wingpanel.h")]
		public const string GETTEXT_PACKAGE;
		[CCode (cheader_filename = "wingpanel.h")]
		public const string INDICATORS_DIR;
		[CCode (cheader_filename = "wingpanel.h")]
		public const string PKGDATADIR;
		[CCode (cheader_filename = "wingpanel.h")]
		public const string RELEASE_NAME;
		[CCode (cheader_filename = "wingpanel.h")]
		public const string VERSION;
		[CCode (cheader_filename = "wingpanel.h")]
		public const string VERSION_INFO;
	}
	namespace Widgets {
		[CCode (cheader_filename = "wingpanel.h")]
		public class AutomaticScrollBox : Gtk.ScrolledWindow {
			public AutomaticScrollBox (Gtk.Adjustment? hadj = null, Gtk.Adjustment? vadj = null);
			public override void get_preferred_height (out int minimum_height, out int natural_height);
			public override void get_preferred_height_for_width (int width, out int minimum_height, out int natural_height);
			public int max_height { get; set; }
		}
		[CCode (cheader_filename = "wingpanel.h")]
		public class Button : Wingpanel.Widgets.Container {
			public Button (string caption, string? icon_name = null);
			public string get_caption ();
			public new Gtk.Label get_label ();
			public Gdk.Pixbuf? get_pixbuf ();
			public void set_caption (string caption);
			public void set_icon (string? icon_name);
			public void set_pixbuf (Gdk.Pixbuf? pixbuf);
			public Button.with_mnemonic (string caption, string? icon_name = null);
		}
		[CCode (cheader_filename = "wingpanel.h")]
		public class Container : Gtk.Button {
			public Container ();
			public Gtk.Grid get_content_widget ();
		}
		[CCode (cheader_filename = "wingpanel.h")]
		public class OverlayIcon : Gtk.Overlay {
			public OverlayIcon (string icon_name);
			public OverlayIcon.from_pixbuf (Gdk.Pixbuf pixbuf);
			public string get_main_icon_name ();
			public Gtk.Image get_main_image ();
			public Gdk.Pixbuf? get_main_pixbuf ();
			public string get_overlay_icon_name ();
			public Gtk.Image get_overlay_image ();
			public Gdk.Pixbuf? get_overlay_pixbuf ();
			public void set_main_icon_name (string icon_name);
			public void set_main_pixbuf (Gdk.Pixbuf? pixbuf);
			public void set_overlay_icon_name (string icon_name);
			public void set_overlay_pixbuf (Gdk.Pixbuf? pixbuf);
		}
		[CCode (cheader_filename = "wingpanel.h")]
		public class Separator : Gtk.Separator {
			public Separator ();
		}
		[CCode (cheader_filename = "wingpanel.h")]
		public class Switch : Wingpanel.Widgets.Container {
			public Switch (string caption, bool active = false);
			public bool get_active ();
			public string get_caption ();
			public new Gtk.Label get_label ();
			public Gtk.Switch get_switch ();
			public void set_active (bool active);
			public void set_caption (string caption);
			public void toggle_switch ();
			public Switch.with_mnemonic (string caption, bool active = false);
			public signal void switched ();
		}
	}
	[CCode (cheader_filename = "wingpanel.h")]
	public abstract class Indicator : GLib.Object {
		public const string APP_LAUNCHER;
		public const string BLUETOOTH;
		public const string DATETIME;
		public const string KEYBOARD;
		public const string MESSAGES;
		public const string NETWORK;
		public const string POWER;
		public const string PRINTER;
		public const string SESSION;
		public const string SOUND;
		public const string SYNC;
		public Indicator ();
		public abstract void closed ();
		public abstract Gtk.Widget get_display_widget ();
		public abstract Gtk.Widget? get_widget ();
		public abstract void opened ();
		public string code_name { get; construct; }
		public string description { get; construct; }
		public string display_name { get; construct; }
		public bool visible { get; set; }
		public signal void close ();
	}
	[CCode (cheader_filename = "wingpanel.h")]
	public class IndicatorManager : GLib.Object {
		public enum ServerType {
			SESSION,
			GREETER;
			public string restrictions_file_name ();
		}
		public void deregister_indicator (string path, Wingpanel.Indicator indicator);
		public static unowned Wingpanel.IndicatorManager get_default ();
		public Gee.Collection<Wingpanel.Indicator> get_indicators ();
		public bool has_indicators ();
		public void initialize (Wingpanel.IndicatorManager.ServerType server_type);
		public void register_indicator (string path, Wingpanel.Indicator indicator);
		public signal void indicator_added (Wingpanel.Indicator indicator);
		public signal void indicator_removed (Wingpanel.Indicator indicator);
	}
}
